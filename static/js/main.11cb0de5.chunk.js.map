{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["current","window","addEventListener","event","alpha","beta","gamma","layout","labelCol","span","wrapperCol","tailLayout","offset","App","props","connectWs","wsAddress","socket","close","undefined","io","handleHold","hold","emit","setState","base","changeSpeed","state","baseGamma","speedZeroRate","speedMaxRate","speedReverseMaxRate","degree","speedRate","speedPercent","changeDirection","baseBeta","directionReverse","direction","speed","this","className","onFinish","Item","label","name","rules","required","message","type","htmlType","onClick","value","min","max","onChange","v","checked","percent","Math","abs","showInfo","status","gapDegree","style","transform","SyncOutlined","spin","onTouchStart","onTouchEnd","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.11cb0de5.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { SyncOutlined } from '@ant-design/icons'\nimport { Progress, InputNumber, Form, Switch, Input, Button } from 'antd'\nimport './App.css';\n\nlet current;\nwindow.addEventListener('deviceorientation', (event) => {\n  const { alpha, beta, gamma } = event;\n  current = { alpha, beta, gamma };\n})\n\n\nconst layout = {\n  labelCol: {\n    span: 4,\n  },\n  wrapperCol: {\n    span: 16,\n  },\n};\n\nconst tailLayout = {\n  wrapperCol: { offset: 4, span: 16 },\n};\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      hold: false,\n      speed: 0,\n      direction: 0,\n      base: {\n        alpha: undefined, beta: undefined, gamma: undefined\n      },\n      speedMaxRate: 80,\n      speedReverseMaxRate: 70,\n      speedZeroRate: 75,\n      speedRate: 0,\n      speedPercent: 0,\n      directionReverse: true,\n    }\n  }\n\n  componentDidMount() {\n    const { changeSpeed, changeDirection } = this;\n    window.addEventListener('deviceorientation', (event) => {\n      changeSpeed();\n      changeDirection();\n    }, false);\n\n  }\n\n  connectWs = ({ wsAddress }) => {\n    if (this.socket) {\n      this.socket.close();\n      this.socket = undefined;\n    };\n\n\n\n    this.socket = window.io(wsAddress);\n  }\n\n  handleHold = (hold = false) => {\n    if (!hold) {\n      this.socket.emit('speed rate', 0);\n      this.socket.emit('direction', 0);\n    }\n    this.setState({\n      hold,\n      base: { ...current }\n    })\n  }\n\n  changeSpeed = () => {\n    const { hold, base: { gamma: baseGamma }, speedZeroRate, speedMaxRate, speedReverseMaxRate } = this.state;\n    if (!hold) {\n      this.setState({\n        speedRate: 0\n      })\n    } else {\n      const degree = current.gamma - baseGamma > 30 ? 30 : current.gamma - baseGamma;\n      const speedRate = degree > 0 ? degree / 30 * (speedMaxRate - speedZeroRate) + speedZeroRate : (speedZeroRate + degree / 30 * (speedZeroRate - speedReverseMaxRate));\n      this.socket.emit('speed rate', speedRate);\n      this.setState({\n        speedRate,\n        speedPercent: degree / 30\n      })\n    }\n  }\n\n  changeDirection = () => {\n    const { hold, base: { beta: baseBeta }, directionReverse } = this.state;\n    if (!hold) {\n      this.setState({\n        direction: 0\n      })\n    } else {\n      let degree = current.beta - baseBeta;\n      degree = degree < -30 ? -30 : degree;\n      degree = degree > 30 ? 30 : degree;\n      this.socket.emit('direction', directionReverse ? -degree / 30 : degree / 30);\n    }\n  }\n\n  render() {\n    const { handleHold, connectWs, state: { hold, directionReverse, direction, speedReverseMaxRate, speedMaxRate, speedZeroRate, speedRate, speedPercent } } = this;\n    return (\n      <div className=\"App\">\n        <br />\n        <Form\n          {...layout}\n          onFinish={connectWs}\n        >\n          <Form.Item\n            label=\"连接地址\"\n            name=\"wsAddress\"\n            rules={[{ required: true, message: '请输入连接地址!' }]}\n          >\n            <Input />\n          </Form.Item>\n          <Form.Item {...tailLayout}>\n            <Button type=\"primary\" htmlType=\"submit\"> 连接 </Button>\n            &nbsp;\n            <Button type=\"danger\" onClick={() => { this.socket.close() }}> 断开 </Button>\n          </Form.Item>\n        </Form>\n        <Form\n          {...layout}\n        >\n          <Form.Item\n            label=\"电调空占比\"\n          >\n            <InputNumber\n              value={speedRate}\n              min={0}\n              max={100}\n              onChange={v => {\n                this.socket.emit('speed rate', v);\n              }}\n            />\n          </Form.Item>\n          <Form.Item\n            label=\"电调 0 功率 PWM 空占比\"\n          >\n            <InputNumber\n              value={speedZeroRate}\n              min={0}\n              max={100}\n              onChange={v => {\n                this.setState({\n                  speedZeroRate: v\n                })\n              }}\n            />\n          </Form.Item>\n          <Form.Item\n            label=\"电调输出最大功率 PWM 空占比\"\n          >\n            <InputNumber\n              value={speedMaxRate}\n              min={0}\n              max={100}\n              onChange={v => {\n                this.setState({\n                  speedMaxRate: v\n                })\n              }}\n            />\n          </Form.Item>\n          <Form.Item\n            label=\"电调反向输出最大功率 PWM 空占比\"\n          >\n            <InputNumber\n              value={speedReverseMaxRate}\n              min={0}\n              max={100}\n              onChange={v => {\n                this.setState({\n                  speedReverseMaxRate: v\n                })\n              }}\n            />\n          </Form.Item>\n          <Form.Item\n            label=\"舵机反向\"\n          >\n            <Switch\n              checked={directionReverse}\n              onChange={v => {\n                this.setState({\n                  directionReverse: v\n                })\n              }}\n            />\n          </Form.Item>\n        </Form>\n\n\n        <Progress className=\"speed\" percent={Math.abs(speedPercent * 100)} showInfo={false} status={speedPercent > 0 ? \"normal\" : \"exception\"} type=\"dashboard\" />\n        <div className=\"direction\">\n          <Progress percent={0} showInfo={false} type=\"dashboard\" gapDegree={200} />\n          <Progress className=\"pointer\" percent={100} showInfo={false} type=\"dashboard\" gapDegree={295} style={{\n            transform: `rotate(${direction}deg)`\n          }} />\n        </div>\n        <SyncOutlined spin={hold}\n          className=\"accelerator\"\n          onTouchStart={() => handleHold(true)}\n          onTouchEnd={() => handleHold(false)}\n        />\n      </div >\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}