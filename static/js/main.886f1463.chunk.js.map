{"version":3,"sources":["Ai.js","Keyboard.js","Player.js","unit.js","App.js","serviceWorker.js","index.js"],"names":["truncatedMobileNet","model","Keybord","props","keyboardBind","controller","speed","direction","onControl","window","document","addEventListener","event","keyName","key","ref","createRef","this","Component","Player","setCanvasRef","canvasRef","nextProps","disabled","disconnect","connect","address","wsavc","WSAvcPlayer","location","protocol","playStream","initCanvas","undefined","className","layout","labelCol","span","wrapperCol","tailLayout","offset","marks","0","25","50","75","100","loadTruncatedMobileNet","a","tf","mobilenet","layer","getLayer","inputs","outputs","output","sleep","time","Promise","resolve","setTimeout","current","controllerDataset","example","action","y","xs","ys","oldX","concat","oldY","dispose","Option","Select","isBuildingExample","Ai","exampleCleanHandler","setState","exampleList","clean","exampleHandler","state","propAction","img","fromPixels","smallImg","resizeNearestNeighbor","processedImg","expandDims","toFloat","div","sub","_action","console","log","addExample","predict","toPixels","smallCanvasRef","push","toDataURL","train","learnArgument","isTraining","Error","layers","flatten","inputShape","shape","slice","dense","units","hiddenUnits","activation","kernelInitializer","useBias","optimizer","adam","learnRate","compile","loss","batchSize","Math","floor","fit","epochs","callbacks","onBatchEnd","batch","logs","toFixed","onTrainEnd","onAi","isPredicting","embeddings","predictions","data","doAction","record","isRecording","learnForm","loading","training","prevProps","prevState","spinning","initialValues","onFinish","Item","label","name","value","type","htmlType","length","required","icon","AppstoreAddOutlined","ArrowLeftOutlined","onClick","ArrowRightOutlined","ArrowUpOutlined","size","grid","gutter","column","itemLayout","pagination","pageSize","dataSource","renderItem","title","actions","CloseOutlined","style","maxWidth","src","alt","TabPane","Tabs","alpha","beta","gamma","App","deviceorientation","changeDirection","changeSpeed","hold","base","baseBeta","directionReverse","speedZeroRate","speedMaxRate","speedReverseMaxRate","isAiControlling","bateDegree","connectWs","wsAddress","playerWsAddress","socket","close","io","on","wsConnected","changeZeroSpeedRate","store","set","disconnectWs","e","preventDefault","handleHold","emit","speedRate","directionRate","appRef","React","get","playerEnabled","v","rate","checked","margin","onChange","ExpandOutlined","requestFullscreen","tab","AimOutlined","onTouchStart","onTouchEnd","UpOutlined","DownOutlined","min","max","included","tooltipVisible","rules","message","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.886f1463.chunk.js","sourcesContent":["import React, { Component, createRef } from \"react\";\nimport { Form, Button, Spin, InputNumber, List, Card, Select } from \"antd\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport { AppstoreAddOutlined, CloseOutlined, ArrowLeftOutlined, ArrowRightOutlined, ArrowUpOutlined } from \"@ant-design/icons\";\nimport {\n  layout,\n  tailLayout,\n  loadTruncatedMobileNet,\n  ControllerDataset,\n  sleep\n} from \"./unit\";\n\nlet truncatedMobileNet, model;\nconst controllerDataset = new ControllerDataset();\nconst { Option } = Select;\n\nlet isBuildingExample = false;\n\nexport default class Ai extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      learnForm: {},\n      exampleList: [],\n      loading: false,\n      training: false,\n      isPredicting: false,\n      isRecording: false,\n      loss: 0,\n      learnArgument: {\n        learnRate: 0.001,\n        batchSize: 0.4,\n        epochs: 20,\n        hiddenUnits: 100\n      }\n    };\n    this.smallCanvasRef = createRef();\n  }\n\n  async componentDidMount() {\n    this.setState({ loading: true });\n    truncatedMobileNet = await loadTruncatedMobileNet();\n    this.setState({ loading: false });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (\n      prevProps.action !== this.props.action &&\n      this.state.isRecording &&\n      !isBuildingExample\n    ) {\n      this.exampleHandler(this.props.action);\n    }\n  }\n\n  exampleCleanHandler = async () => {\n    this.setState({\n      exampleList: []\n    });\n    controllerDataset.clean();\n  };\n\n  exampleHandler = async action => {\n    isBuildingExample = true;\n    const {\n      state: { exampleList },\n      props: { action: propAction, canvasRef }\n    } = this;\n\n    const img = tf.browser.fromPixels(canvasRef);\n    const smallImg = img.resizeNearestNeighbor([224, 224]);\n    const processedImg = tf.tidy(() =>\n      smallImg\n        .expandDims(0)\n        .toFloat()\n        .div(127)\n        .sub(1)\n    );\n    const _action = action || propAction;\n    const { speed, direction } = _action;\n    console.log(\"example\", _action);\n    controllerDataset.addExample(truncatedMobileNet.predict(processedImg), [\n      speed,\n      direction\n    ]);\n    await tf.browser.toPixels(smallImg, this.smallCanvasRef.current);\n    exampleList.push({\n      img: this.smallCanvasRef.current.toDataURL(),\n      action: { speed, direction }\n    });\n    this.setState({ exampleList });\n    img.dispose();\n    isBuildingExample = false;\n  };\n\n  train = async learnArgument => {\n    this.setState({\n      isTraining: true\n    });\n    console.log(\"Learnning Argument\", learnArgument);\n    if (controllerDataset.xs == null) {\n      throw new Error(\"Add some examples before training!\");\n    }\n\n    // Creates a 2-layer fully connected model. By creating a separate model,\n    // rather than adding layers to the mobilenet model, we \"freeze\" the weights\n    // of the mobilenet model, and only train weights from the new model.\n    model = tf.sequential({\n      layers: [\n        // Flattens the input to a vector so we can use it in a dense layer. While\n        // technically a layer, this only performs a reshape (and has no training\n        // parameters).\n        tf.layers.flatten({\n          inputShape: truncatedMobileNet.outputs[0].shape.slice(1)\n        }),\n        // Layer 1.\n        tf.layers.dense({\n          units: learnArgument.hiddenUnits,\n          activation: \"relu\",\n          kernelInitializer: \"varianceScaling\",\n          useBias: true\n        }),\n        // Layer 2. The number of units of the last layer should correspond\n        // to the number of classes we want to predict.\n        tf.layers.dense({\n          units: 2,\n          kernelInitializer: \"varianceScaling\",\n          useBias: false,\n          activation: \"softmax\"\n        })\n      ]\n    });\n\n    // Creates the optimizers which drives training of the model.\n    const optimizer = tf.train.adam(learnArgument.learnRate);\n    // We use categoricalCrossentropy which is the loss function we use for\n    // categorical classification which measures the error between our predicted\n    // probability distribution over classes (probability that an input is of each\n    // class), versus the label (100% probability in the true class)>\n    model.compile({ optimizer: optimizer, loss: \"meanSquaredError\" });\n\n    // We parameterize batch size as a fraction of the entire dataset because the\n    // number of examples that are collected depends on how many examples the user\n    // collects. This allows us to have a flexible batch size.\n    const batchSize = Math.floor(\n      controllerDataset.xs.shape[0] * learnArgument.batchSize\n    );\n    if (!(batchSize > 0)) {\n      throw new Error(\n        `Batch size is 0 or NaN. Please choose a non-zero fraction.`\n      );\n    }\n\n    // Train the model! Model.fit() will shuffle xs & ys so we don't have to.\n    model.fit(controllerDataset.xs, controllerDataset.ys, {\n      batchSize,\n      epochs: learnArgument.epochs,\n      callbacks: {\n        onBatchEnd: async (batch, logs) => {\n          console.log(\"Loss: \" + logs.loss.toFixed(5));\n          this.setState({ loss: logs.loss.toFixed(5) });\n        },\n        onTrainEnd: logs => {\n          // const loss = logs.loss.toFixed(5);\n          // console.log(\"Train End Loss: \" + logs.loss.toFixed(5));\n          this.setState({\n            isTraining: false\n            // loss\n          });\n        }\n      }\n    });\n  };\n\n  predict = async () => {\n    const {\n      props: { canvasRef, onAi }\n    } = this;\n    onAi(true);\n    this.setState(\n      {\n        isPredicting: true\n      },\n      async () => {\n        while (this.state.isPredicting) {\n          await sleep(200);\n          const img = tf.tidy(() =>\n            tf.browser\n              .fromPixels(canvasRef)\n              .resizeNearestNeighbor([224, 224])\n              .expandDims(0)\n              .toFloat()\n              .div(127)\n              .sub(1)\n          );\n\n          // Make a prediction through mobilenet, getting the internal activation of\n          // the mobilenet model, i.e., \"embeddings\" of the input images.\n          const embeddings = truncatedMobileNet.predict(img);\n\n          // Make a prediction through our newly-trained model using the embeddings\n          // from mobilenet as input.\n          const predictions = model.predict(embeddings);\n\n          // Returns the index with the maximum probability. This number corresponds\n          // to the class the model thinks is the most probable given the input.\n\n          const [speed, direction] = await predictions.data();\n\n          const action = {\n            speed,\n            direction\n          };\n          console.log(\"Ai 动作：\", action);\n          img.dispose();\n\n          this.doAction(action);\n          await tf.nextFrame();\n        }\n        onAi(false);\n      }\n    );\n  };\n\n  record = async () => {\n    this.setState(\n      {\n        isRecording: true\n      }\n      // async () => {\n      //   while (this.state.isRecording) {\n      //     await this.exampleHandler();\n      //     await sleep(1000);\n      //   }\n      // }\n    );\n  };\n\n  async doAction({ speed, direction }) {\n    const {\n      props: { controller }\n    } = this;\n    controller.direction(direction);\n    // controller.speed(speed);\n  }\n\n  render() {\n    const {\n      state: {\n        exampleList,\n        loading,\n        isRecording,\n        isTraining,\n        isPredicting,\n        loss,\n        learnArgument\n      },\n      exampleHandler,\n      exampleCleanHandler,\n      record,\n      predict\n    } = this;\n\n    return (\n      <Spin spinning={loading}>\n        <canvas className=\"ai-canvas\" ref={this.smallCanvasRef}></canvas>\n        <Form {...layout} initialValues={learnArgument} onFinish={this.train}>\n          <Form.Item label=\"Learning rate\" name=\"learnRate\">\n            <InputNumber />\n          </Form.Item>\n          <Form.Item label=\"Batch Size\" name=\"batchSize\">\n            <Select>\n              <Option value={0.05}>0.05</Option>\n              <Option value={0.1}>0.1</Option>\n              <Option value={0.4}>0.4</Option>\n              <Option value={1}>1</Option>\n            </Select>\n          </Form.Item>\n          <Form.Item label=\"Epochs\" name=\"epochs\">\n            <Select>\n              <Option value={10}>10</Option>\n              <Option value={20}>20</Option>\n              <Option value={40}>40</Option>\n            </Select>\n          </Form.Item>\n          <Form.Item label=\"Hidden units\" name=\"hiddenUnits\">\n            <Select>\n              <Option value={100}>100</Option>\n              <Option value={200}>200</Option>\n              <Option value={300}>300</Option>\n              <Option value={400}>400</Option>\n              <Option value={500}>500</Option>\n            </Select>\n          </Form.Item>\n          <Form.Item label=\"loss\">\n            <InputNumber value={loss} />\n          </Form.Item>\n          <Form.Item {...tailLayout}>\n            <Button\n              type=\"primary\"\n              htmlType=\"submit\"\n              key=\"fit\"\n              loading={isTraining}\n              disabled={!exampleList.length}\n            >\n              学习\n            </Button>\n          </Form.Item>\n        </Form>\n        <Form\n          {...layout}\n          initialValues={{ speed: 0, direction: 0 }}\n          onFinish={action => exampleHandler(action)}\n        >\n          <Form.Item name=\"speed\" label=\"速度\" required>\n            <InputNumber />\n          </Form.Item>\n          <Form.Item name=\"direction\" label=\"方向\" required>\n            <InputNumber />\n          </Form.Item>\n          <Form.Item {...tailLayout} className=\"form-item-button\">\n            <Button\n              key=\"record-once\"\n              htmlType=\"submit\"\n              type=\"primary\"\n              icon={<AppstoreAddOutlined />}\n            />\n            <Button\n              type=\"primary\"\n              icon={<ArrowLeftOutlined />}\n              onClick={() => exampleHandler({ speed: 1, direction: 1 })}\n            />\n            <Button\n              type=\"primary\"\n              icon={<ArrowRightOutlined />}\n              onClick={() => exampleHandler({ speed: 1, direction: -1 })}\n            />\n            <Button\n              type=\"primary\"\n              icon={<ArrowUpOutlined />}\n              onClick={() => exampleHandler({ speed: 1, direction: 0 })}\n            />\n            <Button\n              type=\"primary\"\n              key=\"record\"\n              loading={isRecording}\n              onClick={record}\n            >\n              开始记录\n            </Button>\n            <Button\n              key=\"stop\"\n              onClick={() => {\n                this.setState({ isRecording: false });\n              }}\n              disabled={!isRecording}\n            >\n              停止记录\n            </Button>\n            <Button\n              type=\"danger\"\n              disabled={!exampleList.length}\n              onClick={exampleCleanHandler}\n            >\n              清除\n            </Button>\n          </Form.Item>\n          <Form.Item {...tailLayout} className=\"form-item-button\">\n            <Button\n              type=\"danger\"\n              key=\"predic\"\n              loading={isPredicting}\n              onClick={predict}\n            >\n              开始 Ai 驾驶\n            </Button>\n            <Button\n              onClick={() => {\n                this.setState({ isPredicting: false });\n              }}\n              disabled={!isPredicting}\n              key=\"stop\"\n            >\n              停止 Ai 驾驶\n            </Button>\n          </Form.Item>\n        </Form>\n        <List\n          size=\"small\"\n          className=\"ai-example-list\"\n          grid={{ gutter: 16, column: 4 }}\n          itemLayout=\"vertical\"\n          pagination={{\n            pageSize: 12\n          }}\n          dataSource={exampleList}\n          renderItem={({ img, action: { speed, direction } }) => (\n            <List.Item>\n              <Card\n                size=\"small\"\n                title={`速度：${speed}    方向：${direction}`}\n                actions={[\n                  <Button size=\"small\" icon={<CloseOutlined />} type=\"danger\" />\n                ]}\n              >\n                <img style={{ maxWidth: \"100%\" }} src={img} alt=\"example\" />\n              </Card>\n            </List.Item>\n          )}\n        />\n      </Spin>\n    );\n  }\n}\n","import React, { Component, createRef } from \"react\";\n\nexport default class Keybord extends Component {\n  constructor(props) {\n    super(props);\n    this.ref = createRef();\n  }\n\n  componentDidMount() {\n    this.keyboardBind();\n  }\n\n  keyboardBind = () => {\n    const {\n      props: {\n        controller: { speed, direction },\n        onControl\n      }\n    } = this;\n    window.document.addEventListener(\n      \"keydown\",\n      event => {\n        const keyName = event.key;\n        if (keyName === \"w\") {\n          speed(1);\n        }\n        if (keyName === \"s\") {\n          speed(-1);\n        }\n        if (keyName === \"a\") {\n          direction(1);\n        }\n        if (keyName === \"d\") {\n          direction(-1);\n        }\n        onControl && onControl();\n      },\n      false\n    );\n    window.document.addEventListener(\n      \"keyup\",\n      event => {\n        const {\n          props: {\n            controller: { speed, direction },\n            onControl\n          }\n        } = this;\n        const keyName = event.key;\n        if (keyName === \"w\") {\n          speed(0);\n        }\n        if (keyName === \"s\") {\n          speed(0);\n        }\n        if (keyName === \"a\") {\n          direction(0);\n        }\n        if (keyName === \"d\") {\n          direction(0);\n        }\n        onControl && onControl();\n      },\n      false\n    );\n  };\n\n  render() {\n    return <div></div>;\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class Player extends Component {\n  constructor(props) {\n    super(props);\n    this.setCanvasRef = ref => {\n      this.canvasRef = ref;\n      props.setCanvasRef && props.setCanvasRef(ref);\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.disabled !== this.props.disabled) {\n      if (nextProps.disabled) {\n        this.disconnect();\n      } else {\n        this.connect();\n      }\n    }\n  }\n\n  connect() {\n    const { address } = this.props;\n    if (!address) return;\n    this.wsavc = new window.WSAvcPlayer(this.canvasRef, \"webgl\", 1, 35);\n    this.wsavc.connect(\n      `${window.location.protocol === \"https:\" ? \"wss\" : \"ws\"}://${address}`,\n      () => {\n        this.wsavc.playStream();\n      }\n    );\n  }\n\n  disconnect() {\n    if (this.wsavc) {\n      this.wsavc.disconnect();\n      this.wsavc.initCanvas();\n      this.wsavc = undefined;\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"player\">\n        <canvas className=\"canvas\" ref={this.setCanvasRef}></canvas>\n      </div>\n    );\n  }\n}\n","import * as tf from \"@tensorflow/tfjs\";\n\nexport const layout = {\n  labelCol: {\n    span: 6\n  },\n  wrapperCol: {\n    span: 16\n  }\n};\n\nexport const tailLayout = {\n  wrapperCol: { offset: 6, span: 16 }\n};\n\nexport const marks = {\n  0: \"0%\",\n  25: \"25%\",\n  50: \"50%\",\n  75: \"75%\",\n  100: \"100%\"\n};\n\nexport async function loadTruncatedMobileNet() {\n  const mobilenet = await tf.loadLayersModel(\n    \"https://storage.googleapis.com/tfjs-models/tfjs/mobilenet_v1_1.0_224/model.json\"\n  );\n  // Return a model that outputs an internal activation.\n  const layer = mobilenet.getLayer(\"conv_pw_13_relu\");\n  return tf.model({ inputs: mobilenet.inputs, outputs: layer.output });\n}\n\nexport class ControllerDataset {\n  /**\n   * Adds an example to the controller dataset.\n   * @param {Tensor} example A tensor representing the example. It can be an image,\n   *     an activation, or any other type of Tensor.\n   * @param {[number]} action speed and direction.\n   */\n  addExample(example, action) {\n    // One-hot encode the label.\n    const y = tf.tidy(() => tf.tensor2d(action, [1, 2]));\n\n    if (this.xs == null) {\n      // For the first example that gets added, keep example and y so that the\n      // ControllerDataset owns the memory of the inputs. This makes sure that\n      // if addExample() is called in a tf.tidy(), these Tensors will not get\n      // disposed.\n      this.xs = tf.keep(example);\n      this.ys = tf.keep(y);\n    } else {\n      const oldX = this.xs;\n      this.xs = tf.keep(oldX.concat(example, 0));\n\n      const oldY = this.ys;\n      this.ys = tf.keep(oldY.concat(y, 0));\n\n      oldX.dispose();\n      oldY.dispose();\n      y.dispose();\n    }\n  }\n  clean() {\n    this.xs.dispose();\n    this.ys.dispose();\n    this.xs = null;\n    this.ys = null;\n  }\n}\n\nexport async function sleep(time) {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve();\n    }, time);\n  });\n}\n","import React, { Component } from \"react\";\nimport store from \"store\";\nimport {\n  ExpandOutlined,\n  AimOutlined,\n  DownOutlined,\n  UpOutlined\n} from \"@ant-design/icons\";\nimport { InputNumber, Form, Switch, Input, Button, Slider, Tabs } from \"antd\";\nimport Keyboard from \"./Keyboard\";\nimport \"./App.css\";\nimport Player from \"./Player\";\nimport Ai from \"./Ai\";\nimport { layout, tailLayout, marks } from \"./unit\";\n\nconst { TabPane } = Tabs;\nlet current;\nwindow.addEventListener(\"deviceorientation\", event => {\n  const { alpha, beta, gamma } = event;\n  current = { alpha, beta, gamma };\n});\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.appRef = React.createRef();\n    this.state = {\n      hold: false,\n      speed: 0,\n      direction: 0,\n      base: {\n        alpha: undefined,\n        beta: undefined,\n        gamma: undefined\n      },\n      speedMaxRate: store.get(\"speedMaxRate\") || 80,\n      speedReverseMaxRate: store.get(\"speedReverseMaxRate\") || 70,\n      speedZeroRate: store.get(\"speedZeroRate\") || 75,\n      speedRate: 0,\n      directionReverse: store.get(\"directionReverse\") || true,\n      wsConnected: false,\n      wsAddress: store.get(\"wsAddress\"),\n      playerWsAddress: store.get(\"playerWsAddress\"),\n      playerEnabled: false,\n      canvasRef: undefined,\n      isAiControlling: false,\n      action: {\n        speed: 0,\n        direction: 0\n      }\n    };\n\n    this.controller = {\n      speed: v => {\n        const {\n          changeSpeed,\n          state: { speedMaxRate, speedReverseMaxRate, speedZeroRate, action }\n        } = this;\n        action.speed = v;\n        const rate =\n          v > 0\n            ? speedZeroRate + (speedMaxRate - speedZeroRate) * v\n            : speedZeroRate + (speedZeroRate - speedReverseMaxRate) * v;\n        this.setState({ action: { ...action } });\n        changeSpeed(rate);\n      },\n      direction: v => {\n        const {\n          changeDirection,\n          state: { action }\n        } = this;\n        action.direction = v;\n        changeDirection(v * 5 + 7.5);\n        this.setState({ action: { ...action } });\n      }\n    };\n  }\n\n  componentDidMount() {\n    const {\n      deviceorientation,\n      connectWs,\n      state: { wsAddress }\n    } = this;\n    window.addEventListener(\n      \"deviceorientation\",\n      () => {\n        deviceorientation();\n      },\n      false\n    );\n\n    connectWs({ wsAddress });\n  }\n\n  deviceorientation = () => {\n    const {\n      changeSpeed,\n      changeDirection,\n      state: {\n        hold,\n        base: { gamma: baseGamma, beta: baseBeta },\n        directionReverse,\n        speedZeroRate,\n        speedMaxRate,\n        speedReverseMaxRate,\n        isAiControlling\n      }\n    } = this;\n\n    if (isAiControlling) return;\n    let bateDegree = current.beta - baseBeta;\n    bateDegree = bateDegree < -30 ? -30 : bateDegree;\n    bateDegree = bateDegree > 30 ? 30 : bateDegree;\n    const directionRate =\n      (directionReverse ? -bateDegree / 30 : bateDegree / 30) * 5 + 7.5;\n    changeDirection(directionRate);\n\n    // if (!hold) return;\n    // let gamaDegree = current.gamma - baseGamma;\n    // gamaDegree = gamaDegree < -30 ? -30 : gamaDegree;\n    // gamaDegree = gamaDegree > 30 ? 30 : gamaDegree;\n    // const speedRate =\n    //   gamaDegree > 0\n    //     ? (gamaDegree / 30) * (speedMaxRate - speedZeroRate) + speedZeroRate\n    //     : speedZeroRate +\n    //       (gamaDegree / 30) * (speedZeroRate - speedReverseMaxRate);\n    // changeSpeed(speedRate);\n  };\n\n  connectWs = ({ wsAddress, playerWsAddress }) => {\n    if (!wsAddress) return;\n    if (this.socket) {\n      this.socket.close();\n      this.socket = undefined;\n    }\n\n    this.socket = window.io(wsAddress);\n    this.socket.on(\"connect\", () => {\n      this.setState({ wsConnected: true });\n      this.changeZeroSpeedRate(this.state.speedZeroRate);\n      store.set(\"wsAddress\", wsAddress);\n    });\n    this.socket.on(\"disconnect\", () => {\n      this.setState({ wsConnected: false });\n    });\n\n    if (!playerWsAddress) return;\n    this.setState({\n      playerWsAddress\n    });\n    store.set(\"playerWsAddress\", playerWsAddress);\n  };\n\n  disconnectWs = e => {\n    e && e.preventDefault();\n    this.socket.close();\n  };\n\n  handleHold = (hold = false) => {\n    if (!hold) {\n      this.socket.emit(\"speed rate\", 0);\n      this.socket.emit(\"direction rate\", 0);\n    }\n    this.setState({\n      hold,\n      base: { ...current }\n    });\n  };\n\n  changeZeroSpeedRate = speedZeroRate => {\n    if (!this.state.wsConnected) return;\n    this.socket.emit(\"speed zero rate\", speedZeroRate);\n    this.setState({ speedZeroRate });\n  };\n\n  changeSpeed = speedRate => {\n    if (!this.state.wsConnected) return;\n    this.socket.emit(\"speed rate\", speedRate);\n    this.setState({ speedRate });\n  };\n\n  changeDirection = directionRate => {\n    if (!this.state.wsConnected) return;\n    this.socket.emit(\"direction rate\", directionRate);\n    this.setState({ direction: directionRate });\n  };\n\n  render() {\n    const {\n      connectWs,\n      disconnectWs,\n      changeSpeed,\n      changeDirection,\n      controller,\n      state: {\n        wsConnected,\n        directionReverse,\n        direction,\n        speedReverseMaxRate,\n        speedMaxRate,\n        speedZeroRate,\n        speedRate,\n        wsAddress,\n        playerWsAddress,\n        playerEnabled,\n        canvasRef,\n        action\n      }\n    } = this;\n    return (\n      <div className=\"App\" ref={this.appRef}>\n        <Form layout=\"inline\" className=\"status\" size=\"small\">\n          <Form.Item label=\"连接状态\">\n            <Switch checked={wsConnected} disabled />\n          </Form.Item>\n\n          <Form.Item label=\"舵机 PWM\">\n            <InputNumber\n              style={{ margin: \"0 16px\" }}\n              value={direction}\n              onChange={changeDirection}\n            />\n          </Form.Item>\n          <Form.Item label=\"电调 PWM\">\n            <InputNumber\n              style={{ margin: \"0 16px\" }}\n              value={speedRate}\n              onChange={changeSpeed}\n            />\n          </Form.Item>\n          <Form.Item label=\"摄像头\">\n            <Switch\n              checked={playerEnabled}\n              onChange={playerEnabled => {\n                this.setState({ playerEnabled });\n              }}\n            />\n          </Form.Item>\n          <Form.Item label=\"全屏\">\n            <Button\n              type=\"primary\"\n              shape=\"circle\"\n              icon={<ExpandOutlined />}\n              onClick={() => {\n                this.appRef.current.requestFullscreen();\n              }}\n            ></Button>\n          </Form.Item>\n        </Form>\n        <Tabs>\n          <TabPane tab=\"控制\" key={1} className=\"control-pane\">\n            <Form className=\"controller\" size=\"small\" layout=\"inline\">\n              <Form.Item>\n                <Button\n                  type=\"danger\"\n                  onClick={() => {\n                    this.setState({ base: { ...current } });\n                  }}\n                  icon={<AimOutlined />}\n                >\n                  舵机校准\n                </Button>\n              </Form.Item>\n              <Form.Item label=\"舵机反向\">\n                <Switch\n                  checked={directionReverse}\n                  onChange={v => {\n                    this.setState({\n                      directionReverse: v\n                    });\n                  }}\n                />\n              </Form.Item>\n            </Form>\n            <Button\n              className=\"forward-button\"\n              shape=\"circle\"\n              size=\"large\"\n              type=\"primary\"\n              onTouchStart={() => {\n                this.setState({ hold: true });\n                this.changeSpeed(speedMaxRate);\n              }}\n              onTouchEnd={() => {\n                this.setState({ hold: false });\n                this.changeSpeed(speedZeroRate);\n              }}\n              icon={<UpOutlined />}\n            ></Button>\n\n            <Button\n              className=\"backward-button\"\n              shape=\"circle\"\n              size=\"large\"\n              type=\"primary\"\n              onTouchStart={() => {\n                this.setState({ hold: true });\n                this.changeSpeed(speedReverseMaxRate);\n              }}\n              onTouchEnd={() => {\n                this.setState({ hold: false });\n                this.changeSpeed(speedZeroRate);\n              }}\n              icon={<DownOutlined />}\n            ></Button>\n          </TabPane>\n          <TabPane tab=\"设置\" key=\"setting\">\n            <Form {...layout}>\n              <Form.Item label=\"电调无输出 PWM 空占比\">\n                <Slider\n                  value={speedZeroRate}\n                  min={0}\n                  max={100}\n                  onChange={v => {\n                    this.changeZeroSpeedRate(v);\n                    store.set(\"speedZeroRate\", v);\n                  }}\n                  included={false}\n                  tooltipVisible\n                  marks={marks}\n                  disabled\n                />\n              </Form.Item>\n              <Form.Item label=\"电调最大 PWM 空占比\">\n                <Slider\n                  value={speedMaxRate}\n                  min={speedZeroRate}\n                  max={100}\n                  onChange={v => {\n                    this.setState({\n                      speedMaxRate: v\n                    });\n                    store.set(\"speedMaxRate\", v);\n                  }}\n                  marks={marks}\n                />\n              </Form.Item>\n              <Form.Item label=\"电调反向最大 PWM 空占比\">\n                <Slider\n                  value={speedReverseMaxRate}\n                  min={0}\n                  max={speedZeroRate}\n                  onChange={v => {\n                    this.setState({\n                      speedReverseMaxRate: v\n                    });\n                    store.set(\"speedReverseMaxRate\", v);\n                  }}\n                  marks={marks}\n                />\n              </Form.Item>\n            </Form>\n          </TabPane>\n          <TabPane tab=\"连接\" key={3}>\n            <Form\n              {...layout}\n              onFinish={connectWs}\n              initialValues={{ wsAddress, playerWsAddress }}\n            >\n              <br />\n              <Form.Item\n                label=\"控制连接地址\"\n                name=\"wsAddress\"\n                rules={[{ required: true, message: \"请输入连接地址!\" }]}\n              >\n                <Input />\n              </Form.Item>\n              <Form.Item label=\"媒体连接地址\" name=\"playerWsAddress\">\n                <Input />\n              </Form.Item>\n              <Form.Item {...tailLayout}>\n                {wsConnected ? (\n                  <Button type=\"danger\" onClick={disconnectWs}>\n                    断开\n                  </Button>\n                ) : (\n                  <Button type=\"primary\" htmlType=\"submit\">\n                    连接\n                  </Button>\n                )}\n              </Form.Item>\n            </Form>\n          </TabPane>\n          <TabPane tab=\"调试\" key={4}>\n            <Form.Item label=\"电调\">\n              <Slider\n                value={speedRate}\n                min={0}\n                max={100}\n                onChange={changeSpeed}\n              />\n            </Form.Item>\n            <Form.Item label=\"舵机\">\n              <Slider\n                value={direction}\n                min={0}\n                max={100}\n                onChange={changeDirection}\n              />\n            </Form.Item>\n          </TabPane>\n          <TabPane tab=\"Ai\" key=\"ai\">\n            <Ai\n              canvasRef={canvasRef}\n              action={action}\n              controller={controller}\n              onAi={isAiControlling => this.setState({ isAiControlling })}\n            />\n          </TabPane>\n        </Tabs>\n        <Player\n          disabled={!playerEnabled}\n          address={playerWsAddress}\n          setCanvasRef={canvasRef => {\n            this.setState({ canvasRef });\n          }}\n        />\n        <Keyboard controller={controller} />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}